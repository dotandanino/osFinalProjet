--------------------------------------------------------------------------------
Profile data file 'callgrind3.out' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 103140518
Trigger: Program termination
Profiled target:  ./randomGraph2 -v 1000 -e 49000 -r 42 (PID 60142, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
970,314,942 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
107,628,000 (11.09%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_M_incr(long) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 87,662,360 ( 9.03%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator*() const [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 77,492,160 ( 7.99%)  /usr/include/c++/13/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 73,153,006 ( 7.54%)  /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 71,001,447 ( 7.32%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator[](long) const [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 68,881,888 ( 7.10%)  /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 50,314,317 ( 5.19%)  ../question2/Graph.cpp:Graph::isConnected() [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 47,400,320 ( 4.89%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 43,051,200 ( 4.44%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator+=(long) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 41,613,023 ( 4.29%)  ../question2/Graph.cpp:Graph::printGraph() [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 40,168,062 ( 4.14%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::_Bit_reference(unsigned long*, unsigned long) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 38,908,152 ( 4.01%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 38,728,062 ( 3.99%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::operator[](unsigned long) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 35,590,503 ( 3.67%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator bool() const [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
 12,301,607 ( 1.27%)  ./libio/./libio/fileops.c:_IO_file_xsputn@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
 11,890,425 ( 1.23%)  ???:0x00000000000200e0 [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
 11,537,996 ( 1.19%)  ./libio/./libio/iofwrite.c:fwrite [/usr/lib/x86_64-linux-gnu/libc.so.6]
  9,108,401 ( 0.94%)  ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  6,912,344 ( 0.71%)  ../question2/Graph.cpp:Graph::addEdge(int, int) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
  5,742,079 ( 0.59%)  ???:std::ostream& std::ostream::_M_insert<long>(long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  5,643,114 ( 0.58%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  5,615,067 ( 0.58%)  ???:0x00000000000ba1a0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  5,292,329 ( 0.55%)  ???:0x0000000000146900 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  4,444,185 ( 0.46%)  ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  4,238,969 ( 0.44%)  ???:0x0000000000021560 [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
  4,210,380 ( 0.43%)  ???:_Unwind_Find_FDE [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
  3,927,089 ( 0.40%)  ???:0x0000000000022510 [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
  3,832,066 ( 0.39%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__mempcpy_avx_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
  3,646,000 ( 0.38%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
  3,273,136 ( 0.34%)  ???:__gxx_personality_v0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  3,036,315 ( 0.31%)  ./libio/./libio/libioP.h:fwrite
  2,886,213 ( 0.30%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
  2,373,554 ( 0.24%)  ./stdlib/./stdlib/random.c:random [/usr/lib/x86_64-linux-gnu/libc.so.6]
  2,178,022 ( 0.22%)  ???:0x0000000000142070 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  2,160,000 ( 0.22%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_M_bump_up() [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
  1,980,040 ( 0.20%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  1,937,366 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,880,000 ( 0.19%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_const_iterator::operator*() const [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
  1,645,000 ( 0.17%)  /usr/include/c++/13/bits/stl_algobase.h:std::_Bit_iterator std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator, std::_Bit_iterator>(std::_Bit_const_iterator, std::_Bit_const_iterator, std::_Bit_iterator) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
  1,540,364 ( 0.16%)  ???:0x00000000000ba310 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  1,501,515 ( 0.15%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
  1,188,018 ( 0.12%)  ???:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  1,089,011 ( 0.11%)  ???:std::ostream::operator<<(int) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  1,029,204 ( 0.11%)  ???:0x000000000001ff00 [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
  1,008,412 ( 0.10%)  ???:0x000000000001fc00 [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
  1,008,412 ( 0.10%)  ???:0x00000000000247a0 [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
    943,437 ( 0.10%)  ./elf/./elf/dl-find_object.c:_dl_find_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    851,686 ( 0.09%)  ../question3/randomGraph.cpp:main [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
    680,000 ( 0.07%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_const_iterator::operator++() [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
    680,000 ( 0.07%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator++() [/home/dotan/projects/semester_b/operationSystems/finalProject/question4/randomGraph2]
    619,188 ( 0.06%)  ./stdlib/./stdlib/rand.c:rand [/usr/lib/x86_64-linux-gnu/libc.so.6]
    594,954 ( 0.06%)  ???:std::locale::id::_M_id() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    532,795 ( 0.05%)  ???:_Unwind_RaiseException [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
    512,305 ( 0.05%)  ./elf/./elf/dl-lookup.c:do_lookup_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    493,982 ( 0.05%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x
    431,434 ( 0.04%)  ???:0x00000000000ba4a0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    408,043 ( 0.04%)  ???:0x0000000000022a70 [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
    404,828 ( 0.04%)  ???:0x0000000004b20430 [???]
    404,021 ( 0.04%)  ???:0x00000000048f1360 [???]
    396,011 ( 0.04%)  ???:0x00000000048f0d00 [???]
    334,213 ( 0.03%)  ./malloc/./malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc.so.6]
    297,003 ( 0.03%)  ???:std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    291,088 ( 0.03%)  ???:0x0000000000023b00 [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
    280,285 ( 0.03%)  ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           
         .                 struct _Vector_impl_data
         .                 {
         .           	pointer _M_start;
         .           	pointer _M_finish;
         .           	pointer _M_end_of_storage;
         .           
         .           	_GLIBCXX20_CONSTEXPR
         7 ( 0.00%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
         6 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
         3 ( 0.00%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
         .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
         .           	  _M_end_of_storage(__x._M_end_of_storage)
         .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
         .           #endif
-- line 109 ----------------------------------------
-- line 129 ----------------------------------------
         .           	  __x._M_copy_data(__tmp);
         .           	}
         .                 };
         .           
         .                 struct _Vector_impl
         .           	: public _Tp_alloc_type, public _Vector_impl_data
         .                 {
         .           	_GLIBCXX20_CONSTEXPR
        12 ( 0.00%)  	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
         .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
         .           #if __cpp_lib_concepts
         .           	requires is_default_constructible_v<_Tp_alloc_type>
         .           #endif
         6 ( 0.00%)  	: _Tp_alloc_type()
        16 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::_Vector_impl_data::_Vector_impl_data() (1x)
         3 ( 0.00%)  	{ }
         .           
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
         .           	: _Tp_alloc_type(__a)
         .           	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	// Not defaulted, to enforce noexcept(true) even when
-- line 151 ----------------------------------------
-- line 293 ----------------------------------------
         .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
         .                 };
         .           
         .               public:
         .                 typedef _Alloc allocator_type;
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Tp_alloc_type&
       189 ( 0.00%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
        81 ( 0.00%)        { return this->_M_impl; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 const _Tp_alloc_type&
       168 ( 0.00%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
        72 ( 0.00%)        { return this->_M_impl; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 allocator_type
         .                 get_allocator() const _GLIBCXX_NOEXCEPT
         .                 { return allocator_type(_M_get_Tp_allocator()); }
         .           
         .           #if __cplusplus >= 201103L
        17 ( 0.00%)        _Vector_base() = default;
        39 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::_Vector_impl::_Vector_impl() (1x)
         .           #else
         .                 _Vector_base() { }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
         .                 : _M_impl(__a) { }
         .           
-- line 323 ----------------------------------------
-- line 359 ----------------------------------------
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
         .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
         .                 { }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
         3 ( 0.00%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
         .                 {
         .           	_M_deallocate(_M_impl._M_start,
        11 ( 0.00%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
         4 ( 0.00%)        }
         .           
         .               public:
         .                 _Vector_impl _M_impl;
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 pointer
       144 ( 0.00%)        _M_allocate(size_t __n)
         .                 {
         .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
       156 ( 0.00%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
        60 ( 0.00%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
       120 ( 0.00%)        _M_deallocate(pointer __p, size_t __n)
         .                 {
         .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
        60 ( 0.00%)  	if (__p)
       120 ( 0.00%)  	  _Tr::deallocate(_M_impl, __p, __n);
        36 ( 0.00%)        }
         .           
         .               protected:
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 _M_create_storage(size_t __n)
         .                 {
         .           	this->_M_impl._M_start = this->_M_allocate(__n);
         .           	this->_M_impl._M_finish = this->_M_impl._M_start;
-- line 399 ----------------------------------------
-- line 496 ----------------------------------------
         .                 }
         .           
         .                 static pointer
         .                 _S_do_relocate(pointer, pointer, pointer __result,
         .           		     _Tp_alloc_type&, false_type) noexcept
         .                 { return __result; }
         .           
         .                 static _GLIBCXX20_CONSTEXPR pointer
       242 ( 0.00%)        _S_relocate(pointer __first, pointer __last, pointer __result,
         .           		  _Tp_alloc_type& __alloc) noexcept
         .                 {
         .           #if __cpp_if_constexpr
         .           	// All callers have already checked _S_use_relocate() so just do it.
       264 ( 0.00%)  	return std::__relocate_a(__first, __last, __result, __alloc);
     3,236 ( 0.00%)  => /usr/include/c++/13/bits/stl_uninitialized.h:int* std::__relocate_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&) (22x)
         .           #else
         .           	using __do_it = __bool_constant<_S_use_relocate()>;
         .           	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
         .           #endif
        44 ( 0.00%)        }
         .           #endif // C++11
         .           
         .               protected:
         .                 using _Base::_M_allocate;
         .                 using _Base::_M_deallocate;
         .                 using _Base::_M_impl;
         .                 using _Base::_M_get_Tp_allocator;
         .           
-- line 522 ----------------------------------------
-- line 523 ----------------------------------------
         .               public:
         .                 // [23.2.4.1] construct/copy/destroy
         .                 // (assign() and get_allocator() are also listed in this section)
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with no elements.
         .                  */
         .           #if __cplusplus >= 201103L
        17 ( 0.00%)        vector() = default;
        56 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::_Vector_base() (1x)
         .           #else
         .                 vector() { }
         .           #endif
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with no elements.
         .                  *  @param  __a  An allocator object.
         .                  */
-- line 539 ----------------------------------------
-- line 725 ----------------------------------------
         .           
         .                 /**
         .                  *  The dtor only erases the elements, and note that if the
         .                  *  elements themselves are pointers, the pointed-to memory is
         .                  *  not touched in any way.  Managing the pointer is the user's
         .                  *  responsibility.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
        13 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT
         .                 {
        10 ( 0.00%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         6 ( 0.00%)  		      _M_get_Tp_allocator());
        10 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
         .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
        17 ( 0.00%)        }
         7 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::~_Vector_base() (1x)
         .           
         .                 /**
         .                  *  @brief  %Vector assignment operator.
         .                  *  @param  __x  A %vector of identical element and allocator types.
         .                  *
         .                  *  All the elements of @a __x are copied, but any unused capacity in
         .                  *  @a __x will not be copied.
         .                  *
-- line 746 ----------------------------------------
-- line 865 ----------------------------------------
         .                 // iterators
         .                 /**
         .                  *  Returns a read/write iterator that points to the first
         .                  *  element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 iterator
       121 ( 0.00%)        begin() _GLIBCXX_NOEXCEPT
       154 ( 0.00%)        { return iterator(this->_M_impl._M_start); }
       165 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (11x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points to the
         .                  *  first element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_iterator
-- line 882 ----------------------------------------
-- line 885 ----------------------------------------
         .           
         .                 /**
         .                  *  Returns a read/write iterator that points one past the last
         .                  *  element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 iterator
    11,132 ( 0.00%)        end() _GLIBCXX_NOEXCEPT
    15,180 ( 0.00%)        { return iterator(this->_M_impl._M_finish); }
    15,165 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (1,011x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points one past
         .                  *  the last element in the %vector.  Iteration is done in
         .                  *  ordinary element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_iterator
-- line 902 ----------------------------------------
-- line 984 ----------------------------------------
         .                 crend() const noexcept
         .                 { return const_reverse_iterator(begin()); }
         .           #endif
         .           
         .                 // [23.2.4.2] capacity
         .                 /**  Returns the number of elements in the %vector.  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
       350 ( 0.00%)        size() const _GLIBCXX_NOEXCEPT
       456 ( 0.00%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
         .           
         .                 /**  Returns the size() of the largest possible %vector.  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
       192 ( 0.00%)        max_size() const _GLIBCXX_NOEXCEPT
       384 ( 0.00%)        { return _S_max_size(_M_get_Tp_allocator()); }
        96 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::_S_max_size(std::allocator<std::vector<bool, std::allocator<bool> > > const&) (2x)
        20 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::_M_get_Tp_allocator() const (2x)
         .           
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  @brief  Resizes the %vector to the specified number of elements.
         .                  *  @param  __new_size  Number of elements the %vector should contain.
         .                  *
         .                  *  This function will %resize the %vector to the specified
         .                  *  number of elements.  If the number is smaller than the
-- line 1007 ----------------------------------------
-- line 1026 ----------------------------------------
         .                  *  This function will %resize the %vector to the specified
         .                  *  number of elements.  If the number is smaller than the
         .                  *  %vector's current size the %vector is truncated, otherwise
         .                  *  the %vector is extended and new elements are populated with
         .                  *  given data.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
        11 ( 0.00%)        resize(size_type __new_size, const value_type& __x)
         .                 {
        13 ( 0.00%)  	if (__new_size > size())
        17 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::size() const (1x)
        25 ( 0.00%)  	  _M_fill_insert(end(), __new_size - size(), __x);
13,992,847 ( 1.44%)  => /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::vector<bool, std::allocator<bool> >*, std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > > >, unsigned long, std::vector<bool, std::allocator<bool> > const&) (1x)
        41 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::end() (1x)
        17 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::size() const (1x)
         .           	else if (__new_size < size())
         .           	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
         5 ( 0.00%)        }
         .           #else
         .                 /**
         .                  *  @brief  Resizes the %vector to the specified number of elements.
         .                  *  @param  __new_size  Number of elements the %vector should contain.
         .                  *  @param  __x  Data with which new elements should be populated.
         .                  *
         .                  *  This function will %resize the %vector to the specified
         .                  *  number of elements.  If the number is smaller than the
-- line 1048 ----------------------------------------
-- line 1118 ----------------------------------------
         .                  *
         .                  *  This operator allows for easy, array-style, data access.
         .                  *  Note that data access with this operator is unchecked and
         .                  *  out_of_range lookups are not defined. (For checked lookups
         .                  *  see at().)
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reference
18,013,280 ( 1.86%)        operator[](size_type __n) _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_subscript(__n);
17,712,977 ( 1.83%)  	return *(this->_M_impl._M_start + __n);
 4,503,320 ( 0.46%)        }
         .           
         .                 /**
         .                  *  @brief  Subscript access to the data contained in the %vector.
         .                  *  @param __n The index of the element for which data should be
         .                  *  accessed.
         .                  *  @return  Read-only (constant) reference to data.
         .                  *
         .                  *  This operator allows for easy, array-style, data access.
-- line 1138 ----------------------------------------
-- line 1225 ----------------------------------------
         .                 }
         .           
         .                 /**
         .                  *  Returns a read/write reference to the data at the last
         .                  *  element of the %vector.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reference
    11,000 ( 0.00%)        back() _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_nonempty();
    24,000 ( 0.00%)  	return *(end() - 1);
    48,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator-(long) const (1,000x)
    41,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (1,000x)
    11,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (1,000x)
     5,000 ( 0.00%)        }
         .           
         .                 /**
         .                  *  Returns a read-only (constant) reference to the data at the
         .                  *  last element of the %vector.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_reference
         .                 back() const _GLIBCXX_NOEXCEPT
-- line 1245 ----------------------------------------
-- line 1290 ----------------------------------------
         .           	  }
         .           	else
         .           	  _M_realloc_insert(end(), __x);
         .                 }
         .           
         .           #if __cplusplus >= 201103L
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
     9,000 ( 0.00%)        push_back(value_type&& __x)
    17,000 ( 0.00%)        { emplace_back(std::move(__x)); }
   290,907 ( 0.03%)  => /usr/include/c++/13/bits/vector.tcc:int& std::vector<int, std::allocator<int> >::emplace_back<int>(int&&) (1,000x)
    10,000 ( 0.00%)  => /usr/include/c++/13/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (1,000x)
         .           
         .                 template<typename... _Args>
         .           #if __cplusplus > 201402L
         .           	_GLIBCXX20_CONSTEXPR
         .           	reference
         .           #else
         .           	void
         .           #endif
-- line 1307 ----------------------------------------
-- line 1888 ----------------------------------------
         .                 iterator
         .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
         .                 { return _M_insert_rval(__position, std::move(__v)); }
         .           #endif
         .           
         .                 // Called by _M_fill_insert, _M_insert_aux etc.
         .                 _GLIBCXX20_CONSTEXPR
         .                 size_type
       168 ( 0.00%)        _M_check_len(size_type __n, const char* __s) const
         .                 {
       204 ( 0.00%)  	if (max_size() - size() < __n)
        82 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::max_size() const (1x)
        17 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::size() const (1x)
        36 ( 0.00%)  	  __throw_length_error(__N(__s));
         .           
       300 ( 0.00%)  	const size_type __len = size() + (std::max)(size(), __n);
        34 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::size() const (2x)
        21 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (1x)
       324 ( 0.00%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
        82 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::max_size() const (1x)
        17 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::size() const (1x)
        72 ( 0.00%)        }
         .           
         .                 // Called by constructors to check initial size.
         .                 static _GLIBCXX20_CONSTEXPR size_type
         .                 _S_check_init_len(size_type __n, const allocator_type& __a)
         .                 {
         .           	if (__n > _S_max_size(_Tp_alloc_type(__a)))
         .           	  __throw_length_error(
         .           	      __N("cannot create std::vector larger than max_size()"));
         .           	return __n;
         .                 }
         .           
         .                 static _GLIBCXX20_CONSTEXPR size_type
       264 ( 0.00%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
         .                 {
         .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
         .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
         .           	// (even if std::allocator_traits::max_size says we can).
        96 ( 0.00%)  	const size_t __diffmax
         .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
        24 ( 0.00%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
       216 ( 0.00%)  	return (std::min)(__diffmax, __allocmax);
       374 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (22x)
       120 ( 0.00%)        }
         .           
         .                 // Internal erase functions follow.
         .           
         .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         .                 // _M_assign_aux.
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
-- line 1933 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_bvector.h
--------------------------------------------------------------------------------
Ir                  

-- line 80 ----------------------------------------
         .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
         .           
         .             struct _Bit_reference
         .             {
         .               _Bit_type * _M_p;
         .               _Bit_type _M_mask;
         .           
         .               _GLIBCXX20_CONSTEXPR
20,084,031 ( 2.07%)      _Bit_reference(_Bit_type * __x, _Bit_type __y)
20,084,031 ( 2.07%)      : _M_p(__x), _M_mask(__y) { }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               _Bit_reference() _GLIBCXX_NOEXCEPT : _M_p(0), _M_mask(0) { }
         .           
         .           #if __cplusplus >= 201103L
         .               _Bit_reference(const _Bit_reference&) = default;
         .           #endif
         .           
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
14,654,913 ( 1.51%)      operator bool() const _GLIBCXX_NOEXCEPT
20,935,590 ( 2.16%)      { return !!(*_M_p & _M_mask); }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               _Bit_reference&
 1,242,000 ( 0.13%)      operator=(bool __x) _GLIBCXX_NOEXCEPT
         .               {
   570,000 ( 0.06%)        if (__x)
   980,000 ( 0.10%)  	*_M_p |= _M_mask;
         .                 else
   440,000 ( 0.05%)  	*_M_p &= ~_M_mask;
   138,000 ( 0.01%)        return *this;
   276,000 ( 0.03%)      }
         .           
         .           #if __cplusplus > 202002L
         .               constexpr const _Bit_reference&
         .               operator=(bool __x) const noexcept
         .               {
         .                 if (__x)
         .           	*_M_p |= _M_mask;
         .                 else
-- line 119 ----------------------------------------
-- line 181 ----------------------------------------
         .               _Bit_type * _M_p;
         .               unsigned int _M_offset;
         .           
         .               _GLIBCXX20_CONSTEXPR _GLIBCXX_ALWAYS_INLINE
         .               void
         .               _M_assume_normalized() const
         .               {
         .           #if __has_attribute(__assume__) && !defined(__clang__)
13,404,357 ( 1.38%)        unsigned int __ofst = _M_offset;
 8,936,238 ( 0.92%)        __attribute__ ((__assume__ (__ofst < unsigned(_S_word_bit))));
         .           #endif
 4,472,119 ( 0.46%)      }
         .           
         .               _GLIBCXX20_CONSTEXPR
19,454,076 ( 2.00%)      _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
19,454,076 ( 2.00%)      : _M_p(__x), _M_offset(__y) { }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               void
   720,000 ( 0.07%)      _M_bump_up()
         .               {
         .                 _M_assume_normalized();
   720,000 ( 0.07%)        if (_M_offset++ == int(_S_word_bit) - 1)
         .           	{
         .           	  _M_offset = 0;
         .           	  ++_M_p;
         .           	}
   240,000 ( 0.02%)      }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               void
         .               _M_bump_down()
         .               {
         .                 _M_assume_normalized();
         .                 if (_M_offset-- == 0)
         .           	{
         .           	  _M_offset = int(_S_word_bit) - 1;
         .           	  --_M_p;
         .           	}
         .               }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               void
21,525,600 ( 2.22%)      _M_incr(ptrdiff_t __i)
         .               {
         .                 _M_assume_normalized();
12,915,360 ( 1.33%)        difference_type __n = __i + _M_offset;
23,678,160 ( 2.44%)        _M_p += __n / int(_S_word_bit);
17,220,480 ( 1.77%)        __n = __n % int(_S_word_bit);
 4,305,120 ( 0.44%)        if (__n < 0)
         .           	{
         .           	  __n += int(_S_word_bit);
         .           	  --_M_p;
         .           	}
 8,610,240 ( 0.89%)        _M_offset = static_cast<unsigned int>(__n);
 6,457,680 ( 0.67%)      }
         .           
         .               _GLIBCXX_NODISCARD
         .               friend _GLIBCXX20_CONSTEXPR bool
         .               operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
         .               {
         .                 __x._M_assume_normalized();
         .                 __y._M_assume_normalized();
         .                 return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset;
-- line 244 ----------------------------------------
-- line 284 ----------------------------------------
         .           
         .               _GLIBCXX_NODISCARD
         .               friend bool
         .               operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
         .               { return !(__x < __y); }
         .           #endif // three-way comparison
         .           
         .               friend _GLIBCXX20_CONSTEXPR ptrdiff_t
    20,000 ( 0.00%)      operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
         .               {
         .                 __x._M_assume_normalized();
         .                 __y._M_assume_normalized();
    10,000 ( 0.00%)        return (int(_S_word_bit) * (__x._M_p - __y._M_p)
    20,000 ( 0.00%)  	      + __x._M_offset - __y._M_offset);
     4,000 ( 0.00%)      }
         .             };
         .           #pragma GCC diagnostic pop
         .           
         .             struct _Bit_iterator : public _Bit_iterator_base
         .             {
         .               typedef _Bit_reference  reference;
         .           #if __cplusplus > 201703L
         .               typedef void	    pointer;
         .           #else
         .               typedef _Bit_reference* pointer;
         .           #endif
         .               typedef _Bit_iterator   iterator;
         .           
         .               _GLIBCXX20_CONSTEXPR
    38,076 ( 0.00%)      _Bit_iterator() : _Bit_iterator_base(0, 0) { }
    36,072 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (2,004x)
         .           
         .               _GLIBCXX20_CONSTEXPR
21,545,600 ( 2.22%)      _Bit_iterator(_Bit_type * __x, unsigned int __y)
25,854,720 ( 2.66%)      : _Bit_iterator_base(__x, __y) { }
38,782,080 ( 4.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (2,154,560x)
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               iterator
         .               _M_const_cast() const
         .               { return *this; }
         .           
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               reference
24,107,149 ( 2.48%)      operator*() const
         .               {
 4,383,118 ( 0.45%)        _M_assume_normalized();
35,064,944 ( 3.61%)        return reference(_M_p, 1UL << _M_offset);
39,448,062 ( 4.07%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::_Bit_reference(unsigned long*, unsigned long) (2,191,559x)
10,957,795 ( 1.13%)      }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               iterator&
   320,000 ( 0.03%)      operator++()
         .               {
   240,000 ( 0.02%)        _M_bump_up();
 1,080,000 ( 0.11%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_M_bump_up() (40,000x)
    40,000 ( 0.00%)        return *this;
    80,000 ( 0.01%)      }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               iterator
         .               operator++(int)
         .               {
         .                 iterator __tmp = *this;
         .                 _M_bump_up();
         .                 return __tmp;
-- line 346 ----------------------------------------
-- line 360 ----------------------------------------
         .               {
         .                 iterator __tmp = *this;
         .                 _M_bump_down();
         .                 return __tmp;
         .               }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               iterator&
19,373,040 ( 2.00%)      operator+=(difference_type __i)
         .               {
17,220,480 ( 1.77%)        _M_incr(__i);
107,628,000 (11.09%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_M_incr(long) (2,152,560x)
 2,152,560 ( 0.22%)        return *this;
 4,305,120 ( 0.44%)      }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               iterator&
         .               operator-=(difference_type __i)
         .               {
         .                 *this += -__i;
         .                 return *this;
         .               }
         .           
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               reference
25,818,708 ( 2.66%)      operator[](difference_type __i) const
45,182,739 ( 4.66%)      { return *(*this + __i); }
228,065,254 (23.50%)  => /usr/include/c++/13/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) (2,151,559x)
124,790,422 (12.86%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator*() const (2,151,559x)
         .           
         .               _GLIBCXX_NODISCARD
         .               friend _GLIBCXX20_CONSTEXPR iterator
25,830,720 ( 2.66%)      operator+(const iterator& __x, difference_type __n)
         .               {
10,762,800 ( 1.11%)        iterator __tmp = __x;
17,220,480 ( 1.77%)        __tmp += __n;
150,679,200 (15.53%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator+=(long) (2,152,560x)
12,915,360 ( 1.33%)        return __tmp;
10,762,800 ( 1.11%)      }
         .           
         .               _GLIBCXX_NODISCARD
         .               friend _GLIBCXX20_CONSTEXPR iterator
         .               operator+(difference_type __n, const iterator& __x)
         .               { return __x + __n; }
         .           
         .               _GLIBCXX_NODISCARD
         .               friend _GLIBCXX20_CONSTEXPR iterator
-- line 402 ----------------------------------------
-- line 418 ----------------------------------------
         .               typedef const bool*          pointer;
         .           #endif
         .               typedef _Bit_const_iterator  const_iterator;
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }
         .           
         .               _GLIBCXX20_CONSTEXPR
    30,000 ( 0.00%)      _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    36,000 ( 0.00%)      : _Bit_iterator_base(__x, __y) { }
    54,000 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (3,000x)
         .           
         .               _GLIBCXX20_CONSTEXPR
    18,000 ( 0.00%)      _Bit_const_iterator(const _Bit_iterator& __x)
    28,000 ( 0.00%)      : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
    36,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (2,000x)
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               _Bit_iterator
         .               _M_const_cast() const
         .               { return _Bit_iterator(_M_p, _M_offset); }
         .           
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               const_reference
   440,000 ( 0.05%)      operator*() const
         .               {
    80,000 ( 0.01%)        _M_assume_normalized();
   920,000 ( 0.09%)        return _Bit_reference(_M_p, 1UL << _M_offset);
   720,000 ( 0.07%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::_Bit_reference(unsigned long*, unsigned long) (40,000x)
   680,000 ( 0.07%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (40,000x)
   200,000 ( 0.02%)      }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               const_iterator&
   320,000 ( 0.03%)      operator++()
         .               {
   240,000 ( 0.02%)        _M_bump_up();
 1,080,000 ( 0.11%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_M_bump_up() (40,000x)
    40,000 ( 0.00%)        return *this;
    80,000 ( 0.01%)      }
         .           
         .               _GLIBCXX20_CONSTEXPR
         .               const_iterator
         .               operator++(int)
         .               {
         .                 const_iterator __tmp = *this;
         .                 _M_bump_up();
         .                 return __tmp;
-- line 460 ----------------------------------------
-- line 543 ----------------------------------------
         .           	  _GLIBCXX20_CONSTEXPR
         .           	  void operator=(_Bit_iterator __it) { _M_p = __it._M_p; }
         .           	} _M_start;
         .           #endif
         .           	_Bit_iterator	_M_finish;
         .           	_Bit_pointer	_M_end_of_storage;
         .           
         .           	_GLIBCXX20_CONSTEXPR
     8,016 ( 0.00%)  	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
    15,030 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
    74,148 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator() (2,004x)
     3,006 ( 0.00%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	_Bvector_impl_data(const _Bvector_impl_data&) = default;
         .           
         .           	_Bvector_impl_data&
         .           	operator=(const _Bvector_impl_data&) = default;
         .           
         .           	_GLIBCXX20_CONSTEXPR
-- line 561 ----------------------------------------
-- line 569 ----------------------------------------
         .           	{
         .           	  *this = __x;
         .           	  __x._M_reset();
         .           	}
         .           #endif
         .           
         .           	_GLIBCXX20_CONSTEXPR
         .           	void
        12 ( 0.00%)  	_M_reset() _GLIBCXX_NOEXCEPT
        25 ( 0.00%)  	{ *this = _Bvector_impl_data(); }
       100 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_Bvector_impl_data() (1x)
         .           
         .           	_GLIBCXX20_CONSTEXPR
         .           	void
         .           	_M_swap_data(_Bvector_impl_data& __x) _GLIBCXX_NOEXCEPT
         .           	{
         .           	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
         .           	  // information used by TBAA.
         .           	  std::swap(*this, __x);
         .           	}
         .                 };
         .           
        12 ( 0.00%)        struct _Bvector_impl
         .           	: public _Bit_alloc_type, public _Bvector_impl_data
         .                 {
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Bvector_impl() _GLIBCXX_NOEXCEPT_IF(
         .           	  is_nothrow_default_constructible<_Bit_alloc_type>::value)
         .           #if __cpp_concepts && __cpp_lib_type_trait_variable_templates
         .           	requires is_default_constructible_v<_Bit_alloc_type>
         .           #endif
         .           	: _Bit_alloc_type()
         .           	{ }
         .           
         .           	_GLIBCXX20_CONSTEXPR
    17,017 ( 0.00%)  	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
     6,006 ( 0.00%)  	: _Bit_alloc_type(__a)
   100,100 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_Bvector_impl_data() (1,001x)
     3,003 ( 0.00%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	// Not defaulted, to enforce noexcept(true) even when
         .           	// !is_nothrow_move_constructible<_Bit_alloc_type>.
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Bvector_impl(_Bvector_impl&& __x) noexcept
         .           	: _Bit_alloc_type(std::move(__x)), _Bvector_impl_data(std::move(__x))
         .           	{ }
-- line 613 ----------------------------------------
-- line 615 ----------------------------------------
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Bvector_impl(_Bit_alloc_type&& __a, _Bvector_impl&& __x) noexcept
         .           	: _Bit_alloc_type(std::move(__a)), _Bvector_impl_data(std::move(__x))
         .           	{ }
         .           #endif
         .           
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Bit_type*
     1,016 ( 0.00%)  	_M_end_addr() const _GLIBCXX_NOEXCEPT
         .           	{
        14 ( 0.00%)  	  if (this->_M_end_of_storage)
        20 ( 0.00%)  	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
        20 ( 0.00%)  => /usr/include/c++/13/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (2x)
         .           	  return 0;
         4 ( 0.00%)  	}
         .                 };
         .           
         .               public:
         .                 typedef _Alloc allocator_type;
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Bit_alloc_type&
         .                 _M_get_Bit_allocator() _GLIBCXX_NOEXCEPT
         .                 { return this->_M_impl; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 const _Bit_alloc_type&
     7,000 ( 0.00%)        _M_get_Bit_allocator() const _GLIBCXX_NOEXCEPT
     3,000 ( 0.00%)        { return this->_M_impl; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 allocator_type
         .                 get_allocator() const _GLIBCXX_NOEXCEPT
         .                 { return allocator_type(_M_get_Bit_allocator()); }
         .           
         .           #if __cplusplus >= 201103L
         .                 _Bvector_base() = default;
         .           #else
         .                 _Bvector_base() { }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
    12,012 ( 0.00%)        _Bvector_base(const allocator_type& __a)
    15,015 ( 0.00%)        : _M_impl(__a) { }
   128,128 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_Bvector_impl(std::allocator<unsigned long> const&) (1,001x)
         .           
         .           #if __cplusplus >= 201103L
         .                 _Bvector_base(_Bvector_base&&) = default;
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Bvector_base(_Bvector_base&& __x, const allocator_type& __a) noexcept
         .                 : _M_impl(_Bit_alloc_type(__a), std::move(__x._M_impl))
         .                 { }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
         8 ( 0.00%)        ~_Bvector_base()
        15 ( 0.00%)        { this->_M_deallocate(); }
     1,803 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_deallocate() (1x)
        13 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::~_Bvector_impl() (1x)
         .           
         .               protected:
         .                 _Bvector_impl _M_impl;
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Bit_pointer
    12,012 ( 0.00%)        _M_allocate(size_t __n)
         .                 {
    14,014 ( 0.00%)  	_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
    12,012 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_S_nword(unsigned long) (1,001x)
         .           #if __cpp_lib_is_constant_evaluated && __cpp_constexpr_dynamic_alloc
     6,006 ( 0.00%)  	if (std::is_constant_evaluated())
     9,009 ( 0.00%)  => /usr/include/c++/13/type_traits:std::is_constant_evaluated() (1,001x)
         .           	  {
         .           	    __n = _S_nword(__n);
         .           	    for (size_t __i = 0; __i < __n; ++__i)
         .           	      std::construct_at(std::to_address(__p) + __i);
         .           	  }
         .           #endif
     5,005 ( 0.00%)  	return __p;
     5,005 ( 0.00%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         8 ( 0.00%)        _M_deallocate()
         .                 {
     3,007 ( 0.00%)  	if (_M_impl._M_start._M_p)
         .           	  {
     3,013 ( 0.00%)  	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
        37 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_M_end_addr() const (1x)
        12 ( 0.00%)  	    _Bit_alloc_traits::deallocate(_M_impl,
         5 ( 0.00%)  					  _M_impl._M_end_of_storage - __n,
         .           					  __n);
         6 ( 0.00%)  	    _M_impl._M_reset();
       137 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_M_reset() (1x)
         .           	  }
         3 ( 0.00%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 _M_move_data(_Bvector_base&& __x) noexcept
         .                 { _M_impl._M_move_data(std::move(__x._M_impl)); }
         .           #endif
         .           
         .                 _GLIBCXX_CONSTEXPR
         .                 static size_t
    14,014 ( 0.00%)        _S_nword(size_t __n)
    10,010 ( 0.00%)        { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
         .               };
         .           
         .             /**
         .              *  @brief  A specialization of vector for booleans which offers fixed time
         .              *  access to individual elements in any order.
         .              *
         .              *  @ingroup sequences
         .              *  @headerfile vector
-- line 723 ----------------------------------------
-- line 787 ----------------------------------------
         .           #if __cplusplus >= 201103L
         .                 _GLIBCXX20_CONSTEXPR
         .                 explicit
         .                 vector(size_type __n, const allocator_type& __a = allocator_type())
         .                 : vector(__n, false, __a)
         .                 { }
         .           
         .                 _GLIBCXX20_CONSTEXPR
        12 ( 0.00%)        vector(size_type __n, const bool& __value,
         .           	     const allocator_type& __a = allocator_type())
         .           #else
         .                 explicit
         .                 vector(size_type __n, const bool& __value = bool(),
         .           	     const allocator_type& __a = allocator_type())
         .           #endif
         8 ( 0.00%)        : _Base(__a)
       161 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_base(std::allocator<bool> const&) (1x)
         .                 {
         8 ( 0.00%)  	_M_initialize(__n);
       575 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize(unsigned long) (1x)
        10 ( 0.00%)  	_M_initialize_value(__value);
       136 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize_value(bool) (1x)
         4 ( 0.00%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
    13,000 ( 0.00%)        vector(const vector& __x)
    22,000 ( 0.00%)        : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
   161,000 ( 0.02%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_base(std::allocator<bool> const&) (1,000x)
    10,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_get_Bit_allocator() const (1,000x)
         .                 {
    16,000 ( 0.00%)  	const_iterator __xbegin = __x.begin(), __xend = __x.end();
    72,000 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::end() const (1,000x)
    72,000 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() const (1,000x)
    14,000 ( 0.00%)  	_M_initialize(__x.size());
   575,149 ( 0.06%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize(unsigned long) (1,000x)
   227,000 ( 0.02%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::size() const (1,000x)
    27,000 ( 0.00%)  	_M_copy_aligned(__xbegin, __xend, begin());
12,581,000 ( 1.30%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_copy_aligned(std::_Bit_const_iterator, std::_Bit_const_iterator, std::_Bit_iterator) (1,000x)
    72,000 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() (1,000x)
     7,000 ( 0.00%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 vector(vector&&) = default;
         .           
         .               private:
         .                 _GLIBCXX20_CONSTEXPR
         .                 vector(vector&& __x, const allocator_type& __a, true_type) noexcept
         .                 : _Base(std::move(__x), __a)
-- line 823 ----------------------------------------
-- line 882 ----------------------------------------
         .           	{
         .           	  // Check whether it's an integral type. If so, it's not an iterator.
         .           	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
         .           	  _M_initialize_dispatch(__first, __last, _Integral());
         .           	}
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
        17 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT { }
     1,839 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::~_Bvector_base() (1x)
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 vector&
         .                 operator=(const vector& __x)
         .                 {
         .           	if (&__x == this)
         .           	  return *this;
         .           #if __cplusplus >= 201103L
-- line 898 ----------------------------------------
-- line 987 ----------------------------------------
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 assign(initializer_list<bool> __l)
         .                 { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
         .           #endif
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 iterator
23,678,149 ( 2.44%)        begin() _GLIBCXX_NOEXCEPT
45,203,739 ( 4.66%)        { return iterator(this->_M_impl._M_start._M_p, 0); }
86,102,360 ( 8.87%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (2,152,559x)
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_iterator
    22,000 ( 0.00%)        begin() const _GLIBCXX_NOEXCEPT
    42,000 ( 0.00%)        { return const_iterator(this->_M_impl._M_start._M_p, 0); }
    80,000 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_const_iterator::_Bit_const_iterator(unsigned long*, unsigned int) (2,000x)
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 iterator
         .                 end() _GLIBCXX_NOEXCEPT
         .                 { return this->_M_impl._M_finish; }
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_iterator
    22,000 ( 0.00%)        end() const _GLIBCXX_NOEXCEPT
    40,000 ( 0.00%)        { return this->_M_impl._M_finish; }
    82,000 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_iterator const&) (2,000x)
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reverse_iterator
         .                 rbegin() _GLIBCXX_NOEXCEPT
         .                 { return reverse_iterator(end()); }
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_reverse_iterator
-- line 1019 ----------------------------------------
-- line 1049 ----------------------------------------
         .                 [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
         .                 const_reverse_iterator
         .                 crend() const noexcept
         .                 { return const_reverse_iterator(begin()); }
         .           #endif
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
    11,000 ( 0.00%)        size() const _GLIBCXX_NOEXCEPT
    31,000 ( 0.00%)        { return size_type(end() - begin()); }
    72,000 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() const (1,000x)
    72,000 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::end() const (1,000x)
    41,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::operator-(std::_Bit_iterator_base const&, std::_Bit_iterator_base const&) (1,000x)
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
         .                 max_size() const _GLIBCXX_NOEXCEPT
         .                 {
         .           	const size_type __isize =
         .           	  __gnu_cxx::__numeric_traits<difference_type>::__max
         .           	  - int(_S_word_bit) + 1;
-- line 1066 ----------------------------------------
-- line 1078 ----------------------------------------
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 bool
         .                 empty() const _GLIBCXX_NOEXCEPT
         .                 { return begin() == end(); }
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reference
25,818,708 ( 2.66%)        operator[](size_type __n)
47,334,298 ( 4.88%)        { return begin()[__n]; }
423,857,123 (43.68%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator[](long) const (2,151,559x)
154,912,248 (15.97%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() (2,151,559x)
         .           
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_reference
         .                 operator[](size_type __n) const
         .                 { return begin()[__n]; }
         .           
         .               protected:
         .                 _GLIBCXX20_CONSTEXPR
-- line 1095 ----------------------------------------
-- line 1331 ----------------------------------------
         .           	emplace(const_iterator __pos, _Args&&... __args)
         .           	{ return insert(__pos, bool(__args...)); }
         .           #endif
         .           
         .               protected:
         .                 // Precondition: __first._M_offset == 0 && __result._M_offset == 0.
         .                 _GLIBCXX20_CONSTEXPR
         .                 iterator
    18,000 ( 0.00%)        _M_copy_aligned(const_iterator __first, const_iterator __last,
         .           		      iterator __result)
         .                 {
    10,000 ( 0.00%)  	_Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
   279,000 ( 0.03%)  => /usr/include/c++/13/bits/stl_algobase.h:unsigned long* std::copy<unsigned long*, unsigned long*>(unsigned long*, unsigned long*, unsigned long*) (1,000x)
    31,000 ( 0.00%)  	return std::copy(const_iterator(__last._M_p, 0), __last,
12,151,000 ( 1.25%)  => /usr/include/c++/13/bits/stl_algobase.h:std::_Bit_iterator std::copy<std::_Bit_const_iterator, std::_Bit_iterator>(std::_Bit_const_iterator, std::_Bit_const_iterator, std::_Bit_iterator) (1,000x)
    40,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (1,000x)
    40,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_const_iterator::_Bit_const_iterator(unsigned long*, unsigned int) (1,000x)
     6,000 ( 0.00%)  			 iterator(__q, 0));
     6,000 ( 0.00%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
    12,012 ( 0.00%)        _M_initialize(size_type __n)
         .                 {
     5,005 ( 0.00%)  	if (__n)
         .           	  {
     9,009 ( 0.00%)  	    _Bit_pointer __q = this->_M_allocate(__n);
   328,477 ( 0.03%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_allocate(unsigned long) (1,001x)
    11,011 ( 0.00%)  	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    12,012 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_S_nword(unsigned long) (1,001x)
    15,015 ( 0.00%)  	    iterator __start = iterator(std::__addressof(*__q), 0);
    40,040 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (1,001x)
    10,010 ( 0.00%)  => /usr/include/c++/13/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (1,001x)
     5,005 ( 0.00%)  	    this->_M_impl._M_start = __start;
    15,015 ( 0.00%)  	    this->_M_impl._M_finish = __start + difference_type(__n);
   106,106 ( 0.01%)  => /usr/include/c++/13/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) (1,001x)
         .           	  }
     7,007 ( 0.00%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
        11 ( 0.00%)        _M_initialize_value(bool __x) _GLIBCXX_NOEXCEPT
         .                 {
         8 ( 0.00%)  	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
        18 ( 0.00%)  	  __fill_bvector_n(__p, this->_M_impl._M_end_addr() - __p, __x);
        58 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::__fill_bvector_n(unsigned long*, unsigned long, bool) (1x)
        37 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_M_end_addr() const (1x)
         4 ( 0.00%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 _M_reallocate(size_type __n);
         .           
         .           #if __cplusplus >= 201103L
         .                 _GLIBCXX20_CONSTEXPR
         .                 bool
-- line 1375 ----------------------------------------
-- line 1580 ----------------------------------------
         .                 *__v &= ~__mask;
         .             }
         .           
         .             // Fill N full words, as if using memset, but usable in constant expressions.
         .             __attribute__((__nonnull__))
         .             _GLIBCXX20_CONSTEXPR
         .             inline void
         .             __fill_bvector_n(_Bit_type* __p, size_t __n, bool __x) _GLIBCXX_NOEXCEPT
        11 ( 0.00%)    {
         .           #if __cpp_lib_is_constant_evaluated
         6 ( 0.00%)      if (std::is_constant_evaluated())
         9 ( 0.00%)  => /usr/include/c++/13/type_traits:std::is_constant_evaluated() (1x)
         .               {
         .                 for (size_t __i = 0; __i < __n; ++__i)
         .           	__p[__i] = __x ? ~0ul : 0ul;
         .                 return;
         .               }
         .           #endif
         9 ( 0.00%)      __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
        21 ( 0.00%)  => ???:0x00000000001104a0 (1x)
         2 ( 0.00%)    }
         .           
         .           
         .             _GLIBCXX20_CONSTEXPR
         .             inline void
         .             __fill_a1(_GLIBCXX_STD_C::_Bit_iterator __first,
         .           	    _GLIBCXX_STD_C::_Bit_iterator __last, const bool& __x)
         .             {
         .               if (__first._M_p != __last._M_p)
-- line 1606 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: ../question3/randomGraph.cpp
--------------------------------------------------------------------------------
Ir               

      .           #include "../question2/Graph.hpp"
      .           #include <iostream>
      .           #include <unistd.h>
      .           
      .           extern char* optarg;
      .           
     15 ( 0.00%)  int main(int argc, char* argv[]) {
      .               if( argc != 4){
      .               }
      .               int opt;
      1 ( 0.00%)      int numOfVertex=-1;
      1 ( 0.00%)      int numOfEdges=-1;
      1 ( 0.00%)      int RandomSeed = -1;
     25 ( 0.00%)      while ((opt = getopt(argc, argv, "v:e:r:")) != -1){
  1,135 ( 0.00%)  => ???:0x00000000001103f0 (4x)
      6 ( 0.00%)          if(opt == 'v'){
      .                       numOfVertex=atoi(optarg);
      .                   }
      5 ( 0.00%)          else if(opt == 'e'){
      1 ( 0.00%)              numOfEdges = atoi(optarg);;
      2 ( 0.00%)          }else if(opt == 'r'){
      1 ( 0.00%)              RandomSeed = atoi(optarg);;
      .                   }
      .               }
      6 ( 0.00%)      if(numOfEdges==-1 || numOfVertex==-1 || RandomSeed==-1){
      .                   std::cerr<<"Usage: ./"<<argv[0]<<" -v numOfVertex (int) -e numOfEdge(int) -r Randomseed(int)"<<std::endl;
      .                   exit(1);
      .               }
      8 ( 0.00%)      unsigned long maxEdge = (numOfVertex -1)*numOfVertex/2;
      3 ( 0.00%)      if((unsigned long)numOfEdges>maxEdge){
      .                   std::cerr<<"E"<<numOfEdges<<" maxEdge "<<maxEdge<<std::endl; 
      .                   std::cerr<<"ypu enter too many edges"<<std::endl;
  2,599 ( 0.00%)          exit(1);
      .               }
      1 ( 0.00%)      int edgesAdded=0;
      4 ( 0.00%)      Graph g(numOfVertex);
13,995,890 ( 1.44%)  => /home/dotan/projects/semester_b/operationSystems/finalProject/question4/../question2/Graph.cpp:Graph::Graph(int) (1x)
      3 ( 0.00%)      srand(RandomSeed);
  6,234 ( 0.00%)  => ???:0x0000000000110540 (1x)
103,202 ( 0.01%)      while(edgesAdded<numOfEdges){
257,995 ( 0.03%)          int src=rand()%numOfVertex;
3,042,677 ( 0.31%)  => ???:0x0000000000110410 (51,599x)
154,797 ( 0.02%)          int dest =rand()%numOfVertex;
3,042,674 ( 0.31%)  => ???:0x0000000000110410 (51,599x)
      .                   try{
206,396 ( 0.02%)              g.addEdge(src,dest);
101,674,075 (10.48%)  => /home/dotan/projects/semester_b/operationSystems/finalProject/question4/../question2/Graph.cpp:Graph::addEdge(int, int) (51,599x)
 98,000 ( 0.01%)              edgesAdded++;
 20,792 ( 0.00%)          }catch(const std::exception& e){
148,143 ( 0.02%)  => ???:0x0000000000110450 (2,599x)
      .           
  7,797 ( 0.00%)          }
793,851 ( 0.08%)  => ???:0x00000000001106a0 (2,599x)
      .               }
      3 ( 0.00%)      g.printGraph();
452,025,966 (46.59%)  => /home/dotan/projects/semester_b/operationSystems/finalProject/question4/../question2/Graph.cpp:Graph::printGraph() (1x)
      5 ( 0.00%)      std::vector<int> resualt = g.findEuler();
391,251,554 (40.32%)  => /home/dotan/projects/semester_b/operationSystems/finalProject/question4/../question2/Graph.cpp:Graph::findEuler() (1x)
      3 ( 0.00%)      if(resualt.size()!=0){
      .                   std::cout<<"The resualt is:"<<std::endl;
      .                   for(size_t i=0;i<resualt.size();i++){
      .                       if(i!=resualt.size()-1){
      .                           std::cout<<resualt[i]<<" -> ";
      .                       }
      .                       else{
      .                           std::cout<<resualt[i]<<std::endl;
      .                       }
      .                   }
      .               }
     19 ( 0.00%)  }
     24 ( 0.00%)  => ???:__gcov_exit (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir               

-- line 225 ----------------------------------------
      .              *
      .              *  This is the simple classic generic implementation.  It will work on
      .              *  temporary expressions, since they are only evaluated once, unlike a
      .              *  preprocessor macro.
      .             */
      .             template<typename _Tp>
      .               _GLIBCXX14_CONSTEXPR
      .               inline const _Tp&
    248 ( 0.00%)      min(const _Tp& __a, const _Tp& __b)
      .               {
      .                 // concept requirements
      .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      .                 //return __b < __a ? __b : __a;
    207 ( 0.00%)        if (__b < __a)
     14 ( 0.00%)  	return __b;
     24 ( 0.00%)        return __a;
     62 ( 0.00%)      }
      .           
      .             /**
      .              *  @brief This does what you think it does.
      .              *  @ingroup sorting_algorithms
      .              *  @param  __a  A thing of arbitrary type.
      .              *  @param  __b  Another thing of arbitrary type.
      .              *  @return   The greater of the parameters.
      .              *
      .              *  This is the simple classic generic implementation.  It will work on
      .              *  temporary expressions, since they are only evaluated once, unlike a
      .              *  preprocessor macro.
      .             */
      .             template<typename _Tp>
      .               _GLIBCXX14_CONSTEXPR
      .               inline const _Tp&
    112 ( 0.00%)      max(const _Tp& __a, const _Tp& __b)
      .               {
      .                 // concept requirements
      .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      .                 //return  __a < __b ? __b : __a;
     90 ( 0.00%)        if (__a < __b)
      4 ( 0.00%)  	return __b;
     12 ( 0.00%)        return __a;
     28 ( 0.00%)      }
      .           
      .             /**
      .              *  @brief This does what you think it does.
      .              *  @ingroup sorting_algorithms
      .              *  @param  __a  A thing of arbitrary type.
      .              *  @param  __b  Another thing of arbitrary type.
      .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
      .              *  @return   The lesser of the parameters.
-- line 273 ----------------------------------------
-- line 308 ----------------------------------------
      .                 return __a;
      .               }
      .           
      .             // Fallback implementation of the function in bits/stl_iterator.h used to
      .             // remove the __normal_iterator wrapper. See copy, fill, ...
      .             template<typename _Iterator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _Iterator
 51,483 ( 0.01%)      __niter_base(_Iterator __it)
      .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 33,207 ( 0.00%)      { return __it; }
      .           
      .             template<typename _Ite, typename _Seq>
      .               _Ite
      .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
      .           		 std::random_access_iterator_tag>&);
      .           
      .             // Reverse the __niter_base transformation to get a
      .             // __normal_iterator back again (this assumes that __normal_iterator
-- line 326 ----------------------------------------
-- line 330 ----------------------------------------
      .               inline _From
      .               __niter_wrap(_From __from, _To __res)
      .               { return __from + (__res - std::__niter_base(__from)); }
      .           
      .             // No need to wrap, iterator already has the right type.
      .             template<typename _Iterator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _Iterator
 19,008 ( 0.00%)      __niter_wrap(const _Iterator&, _Iterator __res)
 11,003 ( 0.00%)      { return __res; }
      .           
      .             // All of these auxiliary structs serve two purposes.  (1) Replace
      .             // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
      .             // because the input and output ranges are permitted to overlap.)
      .             // (2) If we're using random access iterators, then write the loop as
      .             // a for loop with an explicit count.
      .           
      .             template<bool _IsMove, bool _IsSimple, typename _Category>
-- line 347 ----------------------------------------
-- line 375 ----------------------------------------
      .           #endif
      .           
      .             template<>
      .               struct __copy_move<false, false, random_access_iterator_tag>
      .               {
      .                 template<typename _II, typename _OI>
      .           	_GLIBCXX20_CONSTEXPR
      .           	static _OI
 21,000 ( 0.00%)  	__copy_m(_II __first, _II __last, _OI __result)
      .           	{
      .           	  typedef typename iterator_traits<_II>::difference_type _Distance;
372,000 ( 0.04%)  	  for(_Distance __n = __last - __first; __n > 0; --__n)
 41,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::operator-(std::_Bit_iterator_base const&, std::_Bit_iterator_base const&) (1,000x)
      .           	    {
880,000 ( 0.09%)  	      *__result = *__first;
3,280,000 ( 0.34%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_const_iterator::operator*() const (40,000x)
2,320,000 ( 0.24%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator*() const (40,000x)
1,000,000 ( 0.10%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) (40,000x)
240,000 ( 0.02%)  	      ++__first;
1,760,000 ( 0.18%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_const_iterator::operator++() (40,000x)
120,000 ( 0.01%)  	      ++__result;
1,760,000 ( 0.18%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator++() (40,000x)
      .           	    }
  6,000 ( 0.00%)  	  return __result;
  6,000 ( 0.00%)  	}
      .           
      .                 template<typename _Tp, typename _Up>
      .           	static void
      .           	__assign_one(_Tp* __to, _Up* __from)
      .           	{ *__to = *__from; }
      .               };
      .           
      .           #if __cplusplus >= 201103L
-- line 401 ----------------------------------------
-- line 425 ----------------------------------------
      .           #endif
      .           
      .             template<bool _IsMove>
      .               struct __copy_move<_IsMove, true, random_access_iterator_tag>
      .               {
      .                 template<typename _Tp, typename _Up>
      .           	_GLIBCXX20_CONSTEXPR
      .           	static _Up*
 10,010 ( 0.00%)  	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
      .           	{
  4,004 ( 0.00%)  	  const ptrdiff_t _Num = __last - __first;
  8,008 ( 0.00%)  	  if (__builtin_expect(_Num > 1, true))
  8,008 ( 0.00%)  	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 24,000 ( 0.00%)  => ???:0x0000000000110690 (1,000x)
      .           	  else if (_Num == 1)
      .           	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
      .           	      __assign_one(__result, __first);
  8,008 ( 0.00%)  	  return __result + _Num;
  2,002 ( 0.00%)  	}
      .               };
      .           
      .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
      .           
      .             template<typename _Tp, typename _Ref, typename _Ptr>
      .               struct _Deque_iterator;
      .           
      .             struct _Bit_iterator;
-- line 450 ----------------------------------------
-- line 489 ----------------------------------------
      .           	istreambuf_iterator<_CharT, char_traits<_CharT> >,
      .           	istreambuf_iterator<_CharT, char_traits<_CharT> >,
      .           	_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>);
      .           #endif // HOSTED
      .           
      .             template<bool _IsMove, typename _II, typename _OI>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _OI
 28,010 ( 0.00%)      __copy_move_a2(_II __first, _II __last, _OI __result)
      .               {
      .                 typedef typename iterator_traits<_II>::iterator_category _Category;
      .           #ifdef __cpp_lib_is_constant_evaluated
 12,006 ( 0.00%)        if (std::is_constant_evaluated())
      9 ( 0.00%)  => /usr/include/c++/13/type_traits:std::is_constant_evaluated() (1x)
      .           	return std::__copy_move<_IsMove, false, _Category>::
      .           	  __copy_m(__first, __last, __result);
      .           #endif
      .                 return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 27,010 ( 0.00%)  			      _Category>::__copy_m(__first, __last, __result);
     54 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int*, int*>(int**, int**, int**) (1x)
  7,002 ( 0.00%)      }
      .           
      .             template<bool _IsMove,
      .           	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
      .               _OI
      .               __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
      .           		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
      .           		   _OI);
      .           
-- line 515 ----------------------------------------
-- line 524 ----------------------------------------
      .               typename __gnu_cxx::__enable_if<
      .                 __is_random_access_iter<_II>::__value,
      .                 _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
      .               __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
      .           
      .             template<bool _IsMove, typename _II, typename _OI>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _OI
 28,010 ( 0.00%)      __copy_move_a1(_II __first, _II __last, _OI __result)
 35,013 ( 0.00%)      { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
11,861,000 ( 1.22%)  => /usr/include/c++/13/bits/stl_algobase.h:std::_Bit_iterator std::__copy_move_a2<false, std::_Bit_const_iterator, std::_Bit_iterator>(std::_Bit_const_iterator, std::_Bit_const_iterator, std::_Bit_iterator) (1,000x)
      .           
      .             template<bool _IsMove, typename _II, typename _OI>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _OI
 30,012 ( 0.00%)      __copy_move_a(_II __first, _II __last, _OI __result)
      .               {
 87,033 ( 0.01%)        return std::__niter_wrap(__result,
    114 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int** std::__copy_move_a1<false, int**, int**>(int**, int**, int**) (1x)
     30 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int** std::__niter_base<int**>(int**) (3x)
     11 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int** std::__niter_wrap<int**>(int** const&, int**) (1x)
      .           		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
      .           					     std::__niter_base(__last),
 11,005 ( 0.00%)  					     std::__niter_base(__result)));
  8,005 ( 0.00%)      }
      .           
      .             template<bool _IsMove,
      .           	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
      .               _OI
      .               __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      .           		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      .           		  _OI);
      .           
-- line 552 ----------------------------------------
-- line 616 ----------------------------------------
      .              *  [first,last); the copy_backward function should be used instead.
      .              *
      .              *  Note that the end of the output range is permitted to be contained
      .              *  within [first,last).
      .             */
      .             template<typename _II, typename _OI>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _OI
 29,011 ( 0.00%)      copy(_II __first, _II __last, _OI __result)
      .               {
      .                 // concept requirements
      .                 __glibcxx_function_requires(_InputIteratorConcept<_II>)
      .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI,
      .           	    typename iterator_traits<_II>::reference>)
      .                 __glibcxx_requires_can_increment_range(__first, __last, __result);
      .           
      .                 return std::__copy_move_a<__is_move_iterator<_II>::__value>
 64,025 ( 0.01%)  	     (std::__miter_base(__first), std::__miter_base(__last), __result);
12,055,000 ( 1.24%)  => /usr/include/c++/13/bits/stl_algobase.h:std::_Bit_iterator std::__copy_move_a<false, std::_Bit_const_iterator, std::_Bit_iterator>(std::_Bit_const_iterator, std::_Bit_const_iterator, std::_Bit_iterator) (1,000x)
 36,000 ( 0.00%)  => /usr/include/c++/13/bits/cpp_type_traits.h:std::_Bit_const_iterator std::__miter_base<std::_Bit_const_iterator>(std::_Bit_const_iterator) (2,000x)
  6,003 ( 0.00%)      }
      .           
      .           #if __cplusplus >= 201103L
      .             /**
      .              *  @brief Moves the range [first,last) into result.
      .              *  @ingroup mutating_algorithms
      .              *  @param  __first  An input iterator.
      .              *  @param  __last   An input iterator.
      .              *  @param  __result An output iterator.
-- line 642 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: ../question2/Graph.cpp
--------------------------------------------------------------------------------
Ir                  

         .           #include "Graph.hpp"
         .           using namespace std;
         .           /**
         .            * @brief Constructor for Graph class that initializes a graph with a given number of vertices.
         .            * @param numOfVertex The number of vertices in the graph.
         .            * @throws std::runtime_error if numOfVertex is not positive.
         .            */
        21 ( 0.00%)  Graph:: Graph(int numOfVertex){
        73 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::vector() (1x)
         2 ( 0.00%)      if(numOfVertex<=0){
         .                   throw std::runtime_error("you must have positive number of vertex");
         .               }
         3 ( 0.00%)      this->numOfVertex=numOfVertex;
        30 ( 0.00%)      neighborsMatrix.resize(numOfVertex,std::vector<bool>(numOfVertex,false));
13,992,976 ( 1.44%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::resize(unsigned long, std::vector<bool, std::allocator<bool> > const&) (1x)
     1,856 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::~vector() (1x)
       914 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::vector(unsigned long, bool const&, std::allocator<bool> const&) (1x)
         9 ( 0.00%)  }
         .           
         .           /**
         .            * @brief Constructor for Graph class that initializes a graph with a given number of vertices and a neighbors matrix.
         .            * @param numOfVertex The number of vertices in the graph.
         .            * @param neighborsMatrix A 2D vector representing the adjacency matrix of the graph.
         .            * @throws std::runtime_error if numOfVertex is not positive, if the matrix size is not N x N, or if some vertex is connected to itself or if the graph is not undirected.
         .            */
         .           Graph::Graph(int numOfVertex ,const std::vector<std::vector<bool>> neighborsMatrix){
-- line 22 ----------------------------------------
-- line 46 ----------------------------------------
         .           }
         .           
         .           /**
         .            * @brief Adds an edge between two vertices in the graph.
         .            * @param src The source vertex.
         .            * @param dest The destination vertex.
         .            * @throws std::runtime_error if src or dest is out of bounds or if they are the same vertex or they are already connected.
         .            */
   773,985 ( 0.08%)  void Graph::addEdge(int src,int dest){
 1,083,579 ( 0.11%)      if(src>=numOfVertex || src<0 || dest>=numOfVertex || dest<0){
   154,797 ( 0.02%)          throw std::runtime_error("src and dest must be in {0,....,n-1}");
         .               }
   154,917 ( 0.02%)      if(src == dest){
       880 ( 0.00%)          throw std::runtime_error("src and dest cant be the same");
   617,116 ( 0.06%)  => ???:0x00000000001106e0 (40x)
    10,338 ( 0.00%)  => ???:0x0000000000110440 (40x)
     3,662 ( 0.00%)  => ???:0x0000000000110480 (40x)
         .               }
 1,502,888 ( 0.15%)      if(neighborsMatrix[src][dest]){
15,622,377 ( 1.61%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (51,559x)
   928,062 ( 0.10%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::operator[](unsigned long) (51,559x)
   876,503 ( 0.09%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (51,559x)
    56,298 ( 0.01%)          throw std::runtime_error("this 2 vtx already connected");
41,929,215 ( 4.32%)  => ???:0x00000000001106e0 (2,559x)
   445,266 ( 0.05%)  => ???:0x0000000000110440 (2,559x)
   225,192 ( 0.02%)  => ???:0x0000000000110480 (2,559x)
         .               }
 1,372,000 ( 0.14%)      neighborsMatrix[src][dest]=true;
14,847,000 ( 1.53%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (49,000x)
   882,000 ( 0.09%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::operator[](unsigned long) (49,000x)
 1,323,000 ( 0.14%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) (49,000x)
 1,372,000 ( 0.14%)      neighborsMatrix[dest][src]=true;
14,847,000 ( 1.53%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (49,000x)
   882,000 ( 0.09%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::operator[](unsigned long) (49,000x)
 1,323,000 ( 0.14%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) (49,000x)
   441,000 ( 0.05%)  }
         .           
         .           /**
         .            * @brief Checks if the graph is connected.
         .            * @return true if the graph is connected, false otherwise.
         .            * This function uses a fake breadth-first search (BFS) algorithm to traverse the graph and check
         .            * we build this function beacuse graph must be connected to have Euler cycle.
         .            */
        12 ( 0.00%)  bool Graph::isConnected(){
         3 ( 0.00%)      vector<int> distance;
     8,006 ( 0.00%)      for(int i=0;i<numOfVertex;i++){
     9,000 ( 0.00%)          distance.push_back(1);
   326,907 ( 0.03%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int&&) (1,000x)
         .               }
         6 ( 0.00%)      queue<int> bfs;
       855 ( 0.00%)  => /usr/include/c++/13/bits/stl_queue.h:std::queue<int, std::deque<int, std::allocator<int> > >::queue<std::deque<int, std::allocator<int> >, void>() (1x)
         9 ( 0.00%)      bfs.push(0);
       327 ( 0.00%)  => /usr/include/c++/13/bits/stl_queue.h:std::queue<int, std::deque<int, std::allocator<int> > >::push(int&&) (1x)
     9,019 ( 0.00%)      while(!bfs.empty()){
    58,116 ( 0.01%)  => /usr/include/c++/13/bits/stl_queue.h:std::queue<int, std::deque<int, std::allocator<int> > >::empty() const (1,002x)
     8,008 ( 0.00%)          int v=bfs.front();
   111,111 ( 0.01%)  => /usr/include/c++/13/bits/stl_queue.h:std::queue<int, std::deque<int, std::allocator<int> > >::front() (1,001x)
     3,003 ( 0.00%)          bfs.pop();
    85,085 ( 0.01%)  => /usr/include/c++/13/bits/stl_queue.h:std::queue<int, std::deque<int, std::allocator<int> > >::pop() (1,001x)
14,024,010 ( 1.45%)          for(int i=0;i<numOfVertex;i++){
36,216,212 ( 3.73%)              if(neighborsMatrix[v][i] && distance[i] == 1){
303,303,000 (31.26%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (1,001,000x)
18,018,000 ( 1.86%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::operator[](unsigned long) (1,001,000x)
17,017,000 ( 1.75%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (1,001,000x)
 1,471,515 ( 0.15%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (98,101x)
    10,000 ( 0.00%)                  distance[i] =0;
    15,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (1,000x)
     5,000 ( 0.00%)                  bfs.push(i);
   136,995 ( 0.01%)  => /usr/include/c++/13/bits/stl_queue.h:std::queue<int, std::deque<int, std::allocator<int> > >::push(int const&) (1,000x)
         .                       }
         .                   }
         .               }
     8,009 ( 0.00%)      for(int i=0;i<numOfVertex;i++){
    14,000 ( 0.00%)          if(distance[i]==1){
    15,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (1,000x)
         .                       return false;
         .                   }
         .               }
         1 ( 0.00%)      return true;
        19 ( 0.00%)  }
       774 ( 0.00%)  => /usr/include/c++/13/bits/stl_queue.h:std::queue<int, std::deque<int, std::allocator<int> > >::~queue() (1x)
       316 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (1x)
         .           
         .           /**
         .            * @brief Finds an Euler cycle in the graph.
         .            * if the is a Euler cycle in the graph, it returns a vector containing the vertices in the cycle by their order.
         .            * If the graph is not connected or if any vertex has an odd degree, it returns an empty vector.
         .            * @return A vector of integers representing the vertices in the Euler cycle, or an empty vector if no Euler cycle exists.
         .            */
        13 ( 0.00%)  vector<int> Graph::findEuler(){
         1 ( 0.00%)      int counter=0;
         4 ( 0.00%)      vector<int> EulerCycle;
         9 ( 0.00%)      if(!this->isConnected()){
390,874,318 (40.28%)  => ../question2/Graph.cpp:Graph::isConnected() (1x)
         .                   cout<<"There cant be Euler cycle in unconnected graph"<<endl;
         .                   return EulerCycle;
         .               }
         6 ( 0.00%)      for(int i=0;i<numOfVertex;i++){
         1 ( 0.00%)          counter=0;
     8,009 ( 0.00%)          for(int j=0;j<numOfVertex;j++){
    29,000 ( 0.00%)              if(neighborsMatrix[i][j]){
   303,000 ( 0.03%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (1,000x)
    18,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::operator[](unsigned long) (1,000x)
    17,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (1,000x)
       404 ( 0.00%)                  counter++;
         .                       }
         .                   }
        13 ( 0.00%)          if(counter%2==1){
        34 ( 0.00%)              cout<<"This graph is not containing Euler cycle becase vtx "<<i<<" have odd degree"<<endl;
       887 ( 0.00%)  => ???:0x0000000000110550 (2x)
       434 ( 0.00%)  => ???:0x0000000000110590 (1x)
       410 ( 0.00%)  => ???:0x00000000001106f0 (1x)
         1 ( 0.00%)              return EulerCycle;
         .                   }
         .               }
         .               vector<vector<bool>> copyMat = neighborsMatrix;
         .               stack<int> s;
         .               s.push(0);
         .               while(!s.empty()){
         .                   int v= s.top();
         .                   bool foundEdge = false;
-- line 129 ----------------------------------------
-- line 137 ----------------------------------------
         .                       }
         .                   }
         .                   if(!foundEdge){
         .                       EulerCycle.push_back(v);
         .                       s.pop();
         .                   }
         .               }
         .               return EulerCycle;
        10 ( 0.00%)  }
         .           /**
         .            * @brief this function print the neighbors of every vertex in the graph.
         .            */
        11 ( 0.00%)  void Graph::printGraph(){
     8,006 ( 0.00%)     for(int i=0;i<numOfVertex;i++){
    20,000 ( 0.00%)          cout<<"neighbors of : "<<i<<std::endl;
   449,195 ( 0.05%)  => ???:0x00000000001106f0 (1,000x)
   347,718 ( 0.04%)  => ???:0x0000000000110550 (1,000x)
   436,818 ( 0.05%)  => ???:0x0000000000110590 (1,000x)
11,009,000 ( 1.13%)          for(int j=0;j<numOfVertex;j++){
29,294,000 ( 3.02%)              if(neighborsMatrix[i][j]){
303,000,000 (31.23%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (1,000,000x)
18,000,000 ( 1.86%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<bool, std::allocator<bool> >, std::allocator<std::vector<bool, std::allocator<bool> > > >::operator[](unsigned long) (1,000,000x)
17,000,000 ( 1.75%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (1,000,000x)
 1,274,000 ( 0.13%)                  cout<<" " <<j ;
43,599,212 ( 4.49%)  => ???:0x00000000001106f0 (98,000x)
27,146,000 ( 2.80%)  => ???:0x0000000000110550 (98,000x)
         .                       }
         .                   }
     8,000 ( 0.00%)          cout<<std::endl;
   434,000 ( 0.04%)  => ???:0x0000000000110590 (1,000x)
         .              } 
        20 ( 0.00%)  }        23 ( 0.00%)  => ???:__gcov_init (1x)

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/generic/dl-new-hash.h
  ./elf/./elf/dl-find_object.c
  ./elf/./elf/dl-lookup.c
  ./libio/./libio/fileops.c
  ./libio/./libio/iofwrite.c
  ./libio/./libio/libioP.h
  ./malloc/./malloc/malloc.c
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
843,023,693 (86.88%)  events annotated

